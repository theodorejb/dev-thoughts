{
  "thoughts": [
    {
      "t": "Why do programmers always mix up Halloween and Christmas?\nBecause Oct 31 equals Dec 25."
    },
    {
      "t": "There are 10 kinds of people in this world: those who understand binary, and those who don't."
    },
    {
      "t": "A programmer walks to the butcher shop and buys a kilo of meat. An hour later he comes back upset that the butcher shortchanged him by 24 grams."
    },
    {
      "t": "Some people, when confronted with a problem, think, \"I know, I'll use threads,\" and then two they hav erpoblesms.",
      "a": "Ned Batchelder",
      "r": "https://nedbatchelder.com/blog/201204/two_problems.html"
    },
    {
      "t": "A programmer puts two glasses on his bedside table before going to sleep. A full one, in case he gets thirsty, and an empty one, in case he doesn't.",
      "r": "https://www.reddit.com/r/AskReddit/comments/1kvhmz/comment/cbt1gd7/"
    },
    {
      "t": "The generation of random numbers is too important to be left to chance.",
      "a": "Robert R. Coveyou"
    },
    {
      "t": "I � Unicode."
    },
    {
      "t": "If you put a million monkeys at a million keyboards, one of them will eventually write a Java program. The rest of them will write Perl programs."
    },
    {
      "t": "You never finish a program, you just stop working on it."
    },
    {
      "t": "Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.",
      "a": "Stan Kelly-Bootle"
    },
    {
      "t": "First, solve the problem. Then, write the code.",
      "a": "John Johnson"
    },
    {
      "t": "I apologize for writing a complicated program. I didn't have time to write a simple one.",
      "a": "Tim Sweeney"
    },
    {
      "t": "Debugging is like being the detective in a crime movie where you are also the murderer.",
      "a": "Filipe Fortes"
    },
    {
      "t": "The value of a prototype is in the education it gives you, not in the code itself.",
      "a": "Alan Cooper"
    },
    {
      "t": "There is surely nothing quite so useless as doing with great efficiency what should not be done at all.",
      "a": "Peter F. Drucker"
    },
    {
      "t": "Programming is not about typing, it's about thinking.",
      "a": "Rich Hickey"
    },
    {
      "t": "Code never lies, comments sometimes do.",
      "a": "Ron Jeffries"
    },
    {
      "t": "Learning to program has no more to do with designing interactive software than learning to touch type has to do with writing poetry.",
      "a": "Ted Nelson"
    },
    {
      "t": "All sorts of things can happen when you're open to new ideas and playing around with things.",
      "a": "Stephanie Kwolek"
    },
    {
      "t": "It would be a mistake to think that solving problems is a purely intellectual affair; determination and emotions play an important role.",
      "a": "George Pólya"
    },
    {
      "t": "In 1974, computers were oppressive devices in far-off air conditioned places. Now you can be oppressed by computers in your own living room.",
      "a": "Ted Nelson"
    },
    {
      "t": "Beware of bugs in the above code; I have only proved it correct, not tried it.",
      "a": "Donald Knuth"
    },
    {
      "t": "If you're not failing 90% of the time, then you're probably not working on sufficiently challenging problems.",
      "a": "Alan Kay"
    },
    {
      "t": "I have reaffirmed a long-standing and strongly held view: Language comparisons are rarely meaningful and even less often fair.",
      "a": "Bjarne Stroustrup"
    },
    {
      "t": "Don't even start considering solutions until you understand the problem. Your goal should be to \"solve\" the problem mostly within the problem domain, not the solution domain.",
      "a": "Oz Nova"
    },
    {
      "t": "The secret to optimization is changing the problem to make it easier to optimize.",
      "a": "John Carmack"
    },
    {
      "t": "They say if you hold a UNIX shell up to your ear, you can hear the C."
    },
    {
      "t": "Any problem in computer science can be solved with another layer of indirection, except of course for the problem of too many indirections.",
      "a": "David J. Wheeler"
    },
    {
      "t": "The most important single aspect of software development is to be clear about what you are trying to build.",
      "a": "Bjarne Stroustrup"
    },
    {
      "t": "Someone who claims to have a perfect programming language is either a salesman or a fool, or both.",
      "a": "Bjarne Stroustrup"
    },
    {
      "t": "Cut until there is nothing left to cut and all there is left is principled and fundamental.",
      "a": "Bjarne Stroustrup"
    },
    {
      "t": "Inside every large program, there is a small program trying to get out.",
      "a": "C. A. R. Hoare"
    },
    {
      "t": "Good programmers don't just write programs. They build a working vocabulary.",
      "a": "Guy Steele"
    },
    {
      "t": "Any code of your own that you haven't looked at for six or more months might as well have been written by someone else.",
      "a": "Alan Eagleson"
    },
    {
      "t": "Code is like humor. When you have to explain it, it's bad.",
      "a": "Cory House"
    },
    {
      "t": "Fix the cause, not the symptom.",
      "a": "Steve Maguire"
    },
    {
      "t": "If builders built buildings the way programmers wrote programs, then the first woodpecker that came along would destroy civilization.",
      "a": "Gerald Weinberg"
    },
    {
      "t": "If \"quick and easy\" fixes are prioritized over clean, well-architected code, eventually there will be no quick and easy fixes.",
      "a": "Theodore J. Brown"
    },
    {
      "t": "Java is to JavaScript what Car is to Carpet.",
      "a": "Chris Heilmann"
    },
    {
      "t": "Rarely is anyone thanked for the work they did to prevent the disaster that didn't happen.",
      "a": "Mikko Hypponen"
    },
    {
      "t": "Formal education will make you a living. Self-education will make you a fortune.",
      "a": "Jim Rohn"
    },
    {
      "t": "A good API is not just easy to use but also hard to misuse.",
      "a": "JBD"
    },
    {
      "t": "In carpentry you measure twice and cut once. In software development you never measure and make cuts until you run out of time.",
      "a": "Adam Morse"
    },
    {
      "t": "Almost every attempt at making something better will be regarded by someone else as a personal attack.",
      "a": "Chris Sacca"
    },
    {
      "t": "UNIX is basically a simple operating system, but you have to be a genius to understand the simplicity.",
      "a": "Dennis M. Ritchie"
    },
    {
      "t": "Hardware eventually fails. Software eventually works.",
      "a": "Michael Hartung"
    },
    {
      "t": "Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.",
      "a": "Patrick McKenzie"
    },
    {
      "t": "There's nothing more permanent than a temporary hack.",
      "a": "Kyle Simpson"
    },
    {
      "t": "Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love.",
      "a": "Pete Cordell"
    },
    {
      "t": "Always bet on JavaScript.",
      "a": "Brendan Eich"
    },
    {
      "t": "No code is faster than no code."
    },
    {
      "t": "The most secure code in the world is code which is never written.",
      "a": "Colin Percival"
    },
    {
      "t": "The proper use of comments is to compensate for our failure to express ourself in code.",
      "a": "Robert C. Martin"
    },
    {
      "t": "I love deadlines. I like the whooshing sound they make as they fly by.",
      "a": "Douglas Adams"
    },
    {
      "t": "The code you write makes you a programmer. The code you delete makes you a good one. The code you don't have to write makes you a great one.",
      "a": "Mario Fusco"
    },
    {
      "t": "The sooner you start to code, the longer the program will take.",
      "a": "Roy Carlson"
    },
    {
      "t": "A language that doesn't affect the way you think about programming is not worth knowing.",
      "a": "Alan J. Perlis"
    },
    {
      "t": "There is never enough time to do it right, but there is always enough time to do it over.",
      "a": "John W. Bergman"
    },
    {
      "t": "The best way to predict the future is to implement it.",
      "a": "Alan Kay"
    },
    {
      "t": "Real programmers can write assembly code in any language.",
      "a": "Larry Wall"
    },
    {
      "t": "Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.",
      "a": "Alan J. Perlis"
    },
    {
      "t": "The function of good software is to make the complex appear to be simple.",
      "a": "Grady Booch"
    },
    {
      "t": "When you feel the need to write a comment, first try to refactor the code so that any comment becomes superfluous.",
      "a": "Martin Fowler"
    },
    {
      "t": "The cleaner and nicer the program, the faster it's going to run. And if it doesn't, it'll be easy to make it fast.",
      "a": "Joshua Bloch"
    },
    {
      "t": "It's better to wait for a productive programmer to become available than it is to wait for the first available programmer to become productive.",
      "a": "Steve McConnell"
    },
    {
      "t": "I am rarely happier than when spending entire day programming my computer to perform automatically a task that it would otherwise take me a good ten seconds to do by hand.",
      "a": "Douglas Adams"
    },
    {
      "t": "A good programmer is someone who always looks both ways before crossing a one-way street.",
      "a": "Doug Linder"
    },
    {
      "t": "Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code.",
      "a": "Dan Salomon"
    },
    {
      "t": "There is not now, nor has there ever been, nor will there ever be, any programming language in which it is the least bit difficult to write bad code.",
      "a": "Flon's Law"
    },
    {
      "t": "Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.",
      "a": "Eric Raymond"
    },
    {
      "t": "Compatibility means deliberately repeating other people's mistakes.",
      "a": "David Wheeler"
    },
    {
      "t": "A program is portable to the extent that it can be easily moved to a new computing environment with much less effort than would be required to write it afresh.",
      "a": "W. Stan Brown"
    },
    {
      "t": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.",
      "a": "Antoine de Saint Exupéry"
    },
    {
      "t": "Computer Science is no more about computers than astronomy is about telescopes.",
      "a": "E. W. Dijkstra"
    },
    {
      "t": "The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.",
      "a": "Tom Cargill"
    },
    {
      "t": "I have always wished for my computer to be as easy to use as my telephone. My wish has come true because I can no longer figure out how to use my telephone.",
      "a": "Bjarne Stroustrup"
    },
    {
      "t": "There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.",
      "a": "C. A. R. Hoare"
    },
    {
      "t": "If you can get today's work done today, but you do it in such a way that you can't possibly get tomorrow’s work done tomorrow, then you lose.",
      "a": "Martin Fowler"
    },
    {
      "t": "Measuring programming progress by lines of code is like measuring aircraft building progress by weight.",
      "a": "Bill Gates"
    },
    {
      "t": "To understand recursion, you must first understand recursion."
    },
    {
      "t": "In C we had to code our own bugs. In C++ we can inherit them."
    },
    {
      "t": "Why did the programmer quit his job?\nBecause he didn't get arrays."
    },
    {
      "t": "Why do Java programmers have to wear glasses?\nBecause they don't C#."
    },
    {
      "t": "How do you explain the movie Inception to a programmer? Basically, when you run a VM inside another VM, inside another VM, inside another VM…, everything runs real slow."
    },
    {
      "t": "How come there is no obfuscated Perl contest?\nBecause everyone would win."
    },
    {
      "t": "An optimist says the glass is half full. A pessimist says the glass is half empty. A programmer says the glass is twice as large as necessary."
    },
    {
      "t": "There are only two hard problems in Computer Science: cache invalidation, naming things and off-by-one-errors."
    },
    {
      "t": "When your hammer is C++, everything begins to look like a thumb."
    },
    {
      "t": "Bad programmers worry about the code. Good programmers worry about data structures and their relationships.",
      "a": "Linus Torvalds"
    },
    {
      "t": "What one programmer can do in one month, two programmers can do in two months.",
      "a": "Fred Brooks"
    },
    {
      "t": "One of my most productive days was throwing away 1000 lines of code.",
      "a": "Ken Thompson"
    },
    {
      "t": "If Java had true garbage collection, most programs would delete themselves upon execution.",
      "a": "Robert Sewell"
    },
    {
      "t": "There are only two kinds of languages: the ones people complain about and the ones nobody uses.",
      "a": "Bjarne Stroustrup"
    },
    {
      "t": "Premature optimization is the root of all evil.",
      "a": "Donald Knuth"
    },
    {
      "t": "No one in the brief history of computing has ever written a piece of perfect software. It's unlikely that you'll be the first.",
      "a": "Andy Hunt"
    },
    {
      "t": "The best programs are the ones written when the programmer is supposed to be working on something else.",
      "a": "Melinda Varian"
    },
    {
      "t": "Simplicity is prerequisite for reliability.",
      "a": "Edsger W. Dijkstra"
    },
    {
      "t": "Software being 'Done' is like lawn being 'Mowed'.",
      "a": "Jim Benson"
    },
    {
      "t": "So much complexity in software comes from trying to make one thing do two things.",
      "a": "Ryan Singer"
    },
    {
      "t": "Talk is cheap. Show me the code.",
      "a": "Linus Torvalds"
    },
    {
      "t": "Before software can be reusable it first has to be usable.",
      "a": "Ralph Johnson"
    },
    {
      "t": "One of the best programming skills you can have is knowing when to walk away for awhile.",
      "a": "Oscar Godson"
    },
    {
      "t": "Without requirements or design, programming is the art of adding bugs to an empty text file.",
      "a": "Louis Srygley"
    },
    {
      "t": "Any fool can write code that a computer can understand. Good programmers write code that humans can understand.",
      "a": "Martin Fowler"
    },
    {
      "t": "The best thing about a boolean is even if you are wrong, you are only off by a bit."
    },
    {
      "t": "Programs must be written for people to read, and only incidentally for machines to execute.",
      "a": "Harold Abelson",
      "r": "Structure and Interpretation of Computer Programs"
    },
    {
      "t": "Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.",
      "a": "Rick Cook",
      "r": "The Wizardry Compiled"
    },
    {
      "t": "Give a man a program, frustrate him for a day. Teach a man to program, frustrate him for a lifetime.",
      "a": "Muhammad Waseem"
    },
    {
      "t": "On two occasions, I have been asked [by members of Parliament], \"Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?\" I am not able to rightly apprehend the kind of confusion of ideas that could provoke such a question.",
      "a": "Charles Babbage"
    },
    {
      "t": "The most disastrous thing that you can ever learn is your first programming language.",
      "a": "Alan Kay"
    },
    {
      "t": "Perl - The only language that looks the same before and after RSA encryption.",
      "a": "Keith Bostic"
    },
    {
      "t": "The most important property of a program is whether it accomplishes the intention of its user.",
      "a": "C.A.R. Hoare"
    },
    {
      "t": "Remember that code is really the language in which we ultimately express the requirements. We may create languages that are closer to the requirements. We may create tools that help us parse and assemble those requirements into formal structures. But we will never eliminate necessary precision — so there will always be code.",
      "a": "Robert C. Martin"
    },
    {
      "t": "Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.",
      "a": "Brian W. Kernighan"
    },
    {
      "t": "Don't gloss over a routine or piece of code involved in the bug because you \"know\" it works. Prove it. Prove it in this context, with this data, with these boundary conditions.",
      "a": "Andrew Hunt",
      "r": "The Pragmatic Programmer: From Journeyman to Master"
    },
    {
      "t": "Weeks of coding can save you hours of planning."
    },
    {
      "t": "If, at first, you do not succeed, call it version 1.0.",
      "a": "Khayri R.R. Woulfe"
    },
    {
      "t": "Programming is learned by writing programs.",
      "a": "Brian Kernighan"
    },
    {
      "t": "You can Change Your Organization or Change Your Organization.",
      "a": "Martin Fowler"
    },
    {
      "t": "Programming is the art of telling another human being what one wants the computer to do.",
      "a": "Donald Knuth"
    },
    {
      "t": "Code is read more than it is written.",
      "a": "Daniel Roy Greenfeld, Audrey Roy Greenfeld"
    },
    {
      "t": "Programming in different languages is like composing pieces in different keys, particularly if you work at the keyboard. If you have learned or written pieces in many keys, each key will have its own special emotional aura.",
      "a": "Douglas Hofstadter"
    },
    {
      "t": "If you have to spend effort looking at a fragment of code and figuring out what it's doing, then you should extract it into a function and name the function after the \"what\".",
      "a": "Martin Fowler",
      "r": "Refactoring: Improving the Design of Existing Code"
    },
    {
      "t": "Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.",
      "a": "Jamie Zawinski"
    },
    {
      "t": "Some people see a problem and think \"I know, I'll use Java!\" Now they have a ProblemFactory.",
      "a": "Chris Lonnen"
    },
    {
      "t": "Some programmers, when confronted with a problem, think \"I know, I'll use floating point arithmetic.\" Now they have 1.999999999997 problems.",
      "a": "Tom Scott"
    },
    {
      "t": "Delivering good software today is often better than perfect software tomorrow, so finish things and ship.",
      "a": "David Thomas",
      "r": "The Pragmatic Programmer: From Journeyman to Master"
    },
    {
      "t": "It's not a bug; it's an undocumented feature."
    },
    {
      "t": "The most important thing in the programming language is the name. A language will not succeed without a good name. I have recently invented a very good name and now I am looking for a suitable language.",
      "a": "Donald Knuth"
    },
    {
      "t": "When it comes to writing code, the number one most important skill is how to keep a tangle of features from collapsing under the weight of its own complexity.",
      "a": "James Hague"
    },
    {
      "t": "Programming isn't about what you know; it's about what you can figure out.",
      "a": "Chris Pine",
      "r": "Learn to Program"
    },
    {
      "t": "...I'm not saying simple code takes less time to write. You'd think it would since you end up with less total code, but a good solution isn't an accretion of code, it's a distillation of it.",
      "a": "Robert Nystrom"
    },
    {
      "t": "Tests are stories we tell the next generation of programmers on a project.",
      "a": "Roy Osherove",
      "r": "The Art of Unit Testing"
    },
    {
      "t": "Programming, it turns out, is hard. The fundamental rules are typically simple and clear. But programs built on top of these rules tend to become complex enough to introduce their own rules and complexity. You're building your own maze, in a way, and you might just get lost in it.",
      "a": "Marijn Haverbeke"
    },
    {
      "t": "Functions that create values are easier to combine in new ways than functions that directly perform side effects.",
      "a": "Marijn Haverbeke"
    },
    {
      "t": "Redundant comments are just places to collect lies and misinformation.",
      "a": "Robert C. Martin",
      "r": "Clean Code: A Handbook of Agile Software Craftsmanship"
    },
    {
      "t": "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense.",
      "a": "Edsger W. Dijkstra"
    },
    {
      "t": "Life is too long to be good at C++ – if you had spent all that time to become good at it, you would essentially have to work with it, too, to get back the costs, and that would just be some long, drawn-out torture.",
      "a": "Erik Naggum"
    },
    {
      "t": "It's not that Perl programmers are idiots, it's that the language rewards idiotic behavior in a way that no other language or tool has ever done.",
      "a": "Erik Naggum"
    },
    {
      "t": "If Perl is the solution, you're solving the wrong problem.",
      "a": "Erik Naggum"
    },
    {
      "t": "XML is a giant step in no direction at all.",
      "a": "Erik Naggum"
    },
    {
      "t": "If car manufacturers made cars according to spec the same way software vendors make software according to spec, all five wheels would be of widely differing sizes, it would take one person to steer and another to work the pedals and yet another to operate the user-friendly menu-driven dashboard, and if it would not drive straight ahead without a lot of effort, civil engineers would respond by building spiraling roads around each city.",
      "a": "Erik Naggum"
    }
  ]
}
